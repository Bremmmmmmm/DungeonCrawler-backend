name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore

    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
          project: 'test'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 7
            --enableRetired
      continue-on-error: true
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
           name: Depcheck report
           path: ${{github.workspace}}/reports
           
    - name: Test with coverage
      run: |
        dotnet test --collect:"XPlat Code Coverage;Format=opencover;"
        
    - name: Install ReportGenerator tool
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Create Coverage Report
      run: reportgenerator -reports:**/coverage.opencover.xml -targetdir:coverage/ -reporttypes:JsonSummary

    - name: Upload coverage to artifact
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: coverage/

    - name: Fail if coverage is under 80%
      run: |
        jsonFile="coverage/Summary.json"
        lineCoverage=$(grep -Po '"linecoverage": \K[0-9.]+' "$jsonFile")
        echo "Line coverage is $lineCoverage%"
                if (( $(echo "$lineCoverage < 80" |bc -l) )); then
          echo "Code coverage is less than 80%"
          exit 1
        fi
        
  Sonarcube:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          ${{ runner.temp }}\scanner\dotnet-sonarscanner begin /k:"bremmmmmmm_backend" /o:"bremmmmmmm" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          dotnet build
          ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
