name: .NET Build and SonarCloud Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for Sonar analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Test with coverage
        run: dotnet test --collect:"XPlat Code Coverage;Format=opencover;"

      - name: Install ReportGenerator tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Create Coverage Report
        run: reportgenerator -reports:**/coverage.opencover.xml -targetdir:coverage/ -reporttypes:JsonSummary

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'test'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired
        continue-on-error: true

      - name: Upload Depcheck Report
        uses: actions/upload-artifact@v4
        with:
          name: Depcheck report
          path: reports/

      - name: Start SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet-sonarscanner begin \
            /k:"bremmmmmmm_backend" \
            /o:"bremmmmmmm" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.host.url="https://sonarcloud.io"
            /d:sonar.exclusions="reports/**"

      - name: Build the project
        run: dotnet build --no-incremental

      - name: End SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Fail if coverage is under 80%
        run: |
          jsonFile="coverage/Summary.json"
          lineCoverage=$(grep -Po '"linecoverage": \K[0-9.]+' "$jsonFile")
          echo "Line coverage is $lineCoverage%"
          if (( $(echo "$lineCoverage < 80" | bc -l) )); then
            echo "Code coverage is less than 80%"
            exit 1
          fi
